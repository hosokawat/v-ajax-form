{"version":3,"file":"v-ajax-form.min.js","sources":["node_modules/vue-runtime-helpers/dist/normalize-component.mjs","src/components/VAjaxForm.vue","src/main.js"],"sourcesContent":["function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier /* server only */, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {\r\n    if (typeof shadowMode !== 'boolean') {\r\n        createInjectorSSR = createInjector;\r\n        createInjector = shadowMode;\r\n        shadowMode = false;\r\n    }\r\n    // Vue.extend constructor export interop.\r\n    const options = typeof script === 'function' ? script.options : script;\r\n    // render functions\r\n    if (template && template.render) {\r\n        options.render = template.render;\r\n        options.staticRenderFns = template.staticRenderFns;\r\n        options._compiled = true;\r\n        // functional template\r\n        if (isFunctionalTemplate) {\r\n            options.functional = true;\r\n        }\r\n    }\r\n    // scopedId\r\n    if (scopeId) {\r\n        options._scopeId = scopeId;\r\n    }\r\n    let hook;\r\n    if (moduleIdentifier) {\r\n        // server build\r\n        hook = function (context) {\r\n            // 2.3 injection\r\n            context =\r\n                context || // cached call\r\n                    (this.$vnode && this.$vnode.ssrContext) || // stateful\r\n                    (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext); // functional\r\n            // 2.2 with runInNewContext: true\r\n            if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\r\n                context = __VUE_SSR_CONTEXT__;\r\n            }\r\n            // inject component styles\r\n            if (style) {\r\n                style.call(this, createInjectorSSR(context));\r\n            }\r\n            // register component module identifier for async chunk inference\r\n            if (context && context._registeredComponents) {\r\n                context._registeredComponents.add(moduleIdentifier);\r\n            }\r\n        };\r\n        // used by ssr in case component is cached and beforeCreate\r\n        // never gets called\r\n        options._ssrRegister = hook;\r\n    }\r\n    else if (style) {\r\n        hook = shadowMode\r\n            ? function (context) {\r\n                style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));\r\n            }\r\n            : function (context) {\r\n                style.call(this, createInjector(context));\r\n            };\r\n    }\r\n    if (hook) {\r\n        if (options.functional) {\r\n            // register for functional component in vue file\r\n            const originalRender = options.render;\r\n            options.render = function renderWithStyleInjection(h, context) {\r\n                hook.call(context);\r\n                return originalRender(h, context);\r\n            };\r\n        }\r\n        else {\r\n            // inject component registration as beforeCreate hook\r\n            const existing = options.beforeCreate;\r\n            options.beforeCreate = existing ? [].concat(existing, hook) : [hook];\r\n        }\r\n    }\r\n    return script;\r\n}\n\nexport default normalizeComponent;\n//# sourceMappingURL=normalize-component.mjs.map\n","<template>\n    <form v-bind=\"$attrs\" :action=\"action\" :method=\"method\" @submit.prevent=\"submit\">\n        <slot></slot>\n    </form>\n</template>\n<script>\nexport default {\n    name: 'VAjaxForm',\n    inheritAttrs: false,\n    props: {\n        action: {\n            type: String,\n            required: true\n        },\n        method: {\n            type: String,\n            default: 'GET',\n            validator: (value) => ['GET', 'POST', 'PUT', 'DELETE', 'PATCH'].includes(value.toUpperCase())\n        },\n        uriEncode: {\n            type: Boolean,\n            default: false\n        }\n    },\n    emits: ['start', 'receive', 'fail', 'done'],\n    methods: {\n        request: function (params) {\n            const vm = this;\n            vm.$emit('start', params);\n            \n            const method = vm.method.toUpperCase();\n            let url = vm.action;\n            const options = { method: method };\n            \n            if (method === 'GET') {\n                const query = new URLSearchParams(params).toString();\n                if (query) {\n                    url += (url.indexOf('?') >= 0 ? '&' : '?') + query;\n                }\n            } else if (method === 'POST') {\n                options.headers = { 'Content-Type': 'application/x-www-form-urlencoded' };\n                options.body = new URLSearchParams(params);\n            } else {\n                options.headers = { 'Content-Type': 'application/json' };\n                options.body = JSON.stringify(params);\n            }\n            \n            fetch(url, options)\n                .then(function (response) {\n                    if (!response.ok) {\n                        throw new Error('HTTP error! status: ' + response.status);\n                    }\n                    return response.text().then(function(text) {\n                        try {\n                            return JSON.parse(text);\n                        } catch (e) {\n                            return text;\n                        }\n                    }).then(function(data) {\n                        vm.$emit('receive', { \n                            data: data, \n                            status: response.status, \n                            statusText: response.statusText\n                        });\n                    });\n                })\n                .catch(function (error) {\n                    vm.$emit('fail', error);\n                })\n                .finally(function () {\n                    vm.$emit('done', params);\n                });\n                }, submit: function () {\n            let params = {};\n            let vm = this;\n            vm.$el.querySelectorAll('input,select,textarea').forEach(function(el){\n                if ((typeof el.attributes['disabled'] === 'undefined')\n                    && (typeof el.attributes['name'] != 'undefined')\n                ) {\n                    if ((el.type === 'radio' || el.type === 'checkbox') && !el.checked) return;\n                    let val = el.value;\n                    let name = el.attributes['name'].value;\n                    if(vm.uriEncode) {\n                        val = encodeURIComponent(val);\n                        name = encodeURIComponent(name);\n                    }\n                    if (typeof params[name] === 'undefined') {\n                        params[name] = val;\n                    } else if (params[name] instanceof Array) {\n                        params[name].push(val);\n                    } else {\n                        params[name] = [params[name], val];\n                    }\n                }\n            });\n            vm.request(params);\n        }\n    }\n}\n</script>\n","import VAjaxForm from './components/VAjaxForm.vue';\n\nconst VAjaxFormPlugin = {\n  install(Vue) {\n    Vue.component('v-ajax-form', VAjaxForm);\n  }\n};\n\nif (typeof window !== 'undefined' && window.Vue) {\n  window.Vue.use(VAjaxFormPlugin);\n}\n\nexport default VAjaxFormPlugin;\n"],"names":["normalizeComponent","template","style","script","scopeId","isFunctionalTemplate","moduleIdentifier","shadowMode","createInjector","createInjectorSSR","createInjectorShadow","options","render","staticRenderFns","_compiled","name","inheritAttrs","props","action","type","String","required","method","default","validator","value","includes","toUpperCase","uriEncode","Boolean","emits","methods","request","params","vm","this","$emit","url","query","URLSearchParams","toString","indexOf","headers","body","JSON","stringify","fetch","then","response","ok","Error","status","text","parse","e","data","statusText","catch","error","finally","submit","$el","querySelectorAll","forEach","el","attributes","checked","val","encodeURIComponent","Array","push","VAjaxFormPlugin","install","Vue","component","VAjaxForm","window","use"],"mappings":"sCAAA,SAASA,EAAmBC,EAAUC,EAAOC,EAAQC,EAASC,EAAsBC,EAAoCC,EAAYC,EAAgBC,EAAmBC,GAOnK,MAAMC,EAA4B,mBAAXR,EAAwBA,EAAOQ,QAAUR,EAiEhE,OA/DIF,GAAYA,EAASW,SACrBD,EAAQC,OAASX,EAASW,OAC1BD,EAAQE,gBAAkBZ,EAASY,gBACnCF,EAAQG,WAAY,GA4DjBX,CACX,0RCnEA,CACAY,KAAA,YACAC,cAAA,EACAC,MAAA,CACAC,OAAA,CACAC,KAAAC,OACAC,UAAA,GAEAC,OAAA,CACAH,KAAAC,OACAG,QAAA,MACAC,UAAAC,GAAA,CAAA,MAAA,OAAA,MAAA,SAAA,SAAAC,SAAAD,EAAAE,gBAEAC,UAAA,CACAT,KAAAU,QACAN,SAAA,IAGAO,MAAA,CAAA,QAAA,UAAA,OAAA,QACAC,QAAA,CACAC,QAAA,SAAAC,GACA,MAAAC,EAAAC,KACAD,EAAAE,MAAA,QAAAH,GAEA,MAAAX,EAAAY,EAAAZ,OAAAK,cACA,IAAAU,EAAAH,EAAAhB,OACA,MAAAP,EAAA,CAAAW,OAAAA,GAEA,GAAA,QAAAA,EAAA,CACA,MAAAgB,EAAA,IAAAC,gBAAAN,GAAAO,WACAF,IACAD,IAAAA,EAAAI,QAAA,MAAA,EAAA,IAAA,KAAAH,EAEA,KAAA,SAAAhB,GACAX,EAAA+B,QAAA,CAAA,eAAA,qCACA/B,EAAAgC,KAAA,IAAAJ,gBAAAN,KAEAtB,EAAA+B,QAAA,CAAA,eAAA,oBACA/B,EAAAgC,KAAAC,KAAAC,UAAAZ,IAGAa,MAAAT,EAAA1B,GACAoC,MAAA,SAAAC,GACA,IAAAA,EAAAC,GACA,MAAA,IAAAC,MAAA,uBAAAF,EAAAG,QAEA,OAAAH,EAAAI,OAAAL,MAAA,SAAAK,GACA,IACA,OAAAR,KAAAS,MAAAD,EACA,CAAA,MAAAE,GACA,OAAAF,CACA,CACA,IAAAL,MAAA,SAAAQ,GACArB,EAAAE,MAAA,UAAA,CACAmB,KAAAA,EACAJ,OAAAH,EAAAG,OACAK,WAAAR,EAAAQ,YAEA,GACA,IACAC,OAAA,SAAAC,GACAxB,EAAAE,MAAA,OAAAsB,EACA,IACAC,SAAA,WACAzB,EAAAE,MAAA,OAAAH,EACA,GACA,EAAA2B,OAAA,WACA,IAAA3B,EAAA,CAAA,EACAC,EAAAC,KACAD,EAAA2B,IAAAC,iBAAA,yBAAAC,SAAA,SAAAC,GACA,QAAA,IAAAA,EAAAC,WAAA,eACA,IAAAD,EAAAC,WAAA,KACA,CACA,IAAA,UAAAD,EAAA7C,MAAA,aAAA6C,EAAA7C,QAAA6C,EAAAE,QAAA,OACA,IAAAC,EAAAH,EAAAvC,MACAV,EAAAiD,EAAAC,WAAA,KAAAxC,MACAS,EAAAN,YACAuC,EAAAC,mBAAAD,GACApD,EAAAqD,mBAAArD,SAEA,IAAAkB,EAAAlB,GACAkB,EAAAlB,GAAAoD,EACAlC,EAAAlB,aAAAsD,MACApC,EAAAlB,GAAAuD,KAAAH,GAEAlC,EAAAlB,GAAA,CAAAkB,EAAAlB,GAAAoD,EAEA,CACA,IACAjC,EAAAF,QAAAC,EACA,KC9FMsC,EAAkB,CACtB,OAAAC,CAAQC,GACNA,EAAIC,UAAU,cAAeC,EACjC,SAGsB,oBAAXC,QAA0BA,OAAOH,KAC1CG,OAAOH,IAAII,IAAIN","x_google_ignoreList":[0]}